import static spark.Spark.*;
import com.google.gson.Gson;

import java.io.PrintWriter;
import java.lang.System.*;
import org.apache.jena.*;
import org.apache.jena.rdf.model.*;
import org.apache.jena.vocabulary.RDF;
import org.apache.jena.vocabulary.OWL;
import org.apache.jena.vocabulary.OWL2;


class SensorStruct {
	String sensorId;
	String quantitykind;
	String unit;
	String metadataType;
	String metadataValue;
}
class ActuatorStruct {
	String actuatorId;
	String effect;
	String value;
}

class SemanticProperty {
	Property hasMetadata;
	Property hasSensingDevice;
	Property hasUnit;
	Property hasQuantityKind;
	Property metaDataValue;
	Property metaDataType;
	Property hasLocation;
	Property hasSubsystem;
	Property hasDeployment;
	Property altRelative;
}

class SemanticResource {
	Resource system;
	Resource sensorid;
	Resource device;
	Resource RoomSensor;//editlagi
	Resource sensingdevice;
	Resource deviceDeployment;
	Resource deployment;
	Resource locationRoom;
	Resource geoPoint;
	Resource sensor;
	Resource SensParam;
	Resource sensorDevice;
	Resource quantityKind;
	Resource qKindName;
	Resource metadata;
	Resource uName;
	Resource unit;
}

public class Main {
	public static String qu = "http://purl.org/NET/ssnx/qu/qu#";
	public static String geo = "http://www.w3.org/2003/01/geo/wgs84_pos#";
	public static String iotlite = "http://purl.oclc.org/NET/UNIS/fiware/iot-lite#";
	public static String iotins = "http://purl.oclc.org/NET/UNIS/iot-lite/iot-liteInstance#";
	public static String ssn = "http://www.w3.org/2005/Incubator/ssn/ssnx/ssn#";
	public static String san = "http://www.irit.fr/recherches/MELODI/ontologies/SAN#";

	
    public static void main(String[] args) {
    	SemanticProperty ontoProp = new SemanticProperty();
    	SemanticResource ontoRes = new SemanticResource();
    	Model m = ModelFactory.createDefaultModel();
    	Gson gson = new Gson();
    	
		initSystem(m);
    	initProp(m, ontoProp);
		
    	ResIterator iter = m.listSubjectsWithProperty(ontoProp.hasSubsystem);
    	System.out.println(iter.nextResource());
		
    	post("/", (request, response) -> {
    		SensorStruct data = gson.fromJson(request.body().toString(), SensorStruct.class);
    		
    		PrintWriter writer = new PrintWriter("Ontology.rdf", "UTF-8");
    		m.write( writer,"N-TRIPLES");
    		writer.close();
    		return response.status();
    	});
    	//initSystem(m);
        	/*String personURI    = "http://somewhere/JohnSmith";
    		String givenName    = "John";
    		String familyName   = "Smith";
    		String fullName     = givenName + " " + familyName;

    		// create an empty Model
    		Model model = ModelFactory.createDefaultModel();

    		// create the resource
    		//   and add the properties cascading style
    		Resource johnSmith
    		  = model.createResource(personURI)
    		         .addProperty(VCARD.FN, fullName)
    		         .addProperty(VCARD.N,
    		                      model.createResource()
    		                           .addProperty(VCARD.Given, givenName)
    		                           .addProperty(VCARD.Family, familyName));
    		model.write(System.out);*/
    }
    
    public static void initProp(Model m, SemanticProperty ontoProp){
    	ontoProp.hasMetadata = m.createProperty(iotlite+"hasMetadata");
    	ontoProp.hasSensingDevice = m.createProperty(iotlite+"hasSensingDevice");
    	ontoProp.hasUnit = m.createProperty(iotlite+"hasUnit");
    	ontoProp.hasQuantityKind = m.createProperty(iotlite+"hasQuantityKind");
    	ontoProp.metaDataValue = m.createProperty(iotlite+"metaDataValue");
    	ontoProp.metaDataType = m.createProperty(iotlite+"metaDataType");
    	ontoProp.hasLocation = m.createProperty(geo+"hasLocation");
    	ontoProp.hasSubsystem = m.createProperty(ssn+"hasSubsystem");
    	ontoProp.hasDeployment = m.createProperty(ssn+"hasDeployment");
    	ontoProp.altRelative = m.createProperty(iotlite+"altRelative");
    }
    
    public static void initSystem(Model m) {


    	Resource root = m.createResource(iotins+"SemanticHome");
    	Resource system = m.createResource(ssn+"system");
    	root.addProperty(RDF.type, OWL2.NamedIndividual)
    		.addProperty(RDF.type, system);
    	
    }
    
    public static void initSensor(Model m, SensorStruct sensorInf, SemanticProperty ontoProp, SemanticResource ontoRes) {

   
    	ontoRes.system = m.getResource(iotins+"SemanticHome");
    	ontoRes.sensorid = m.createResource(iotins+sensorInf.sensorId);
    	ontoRes.device = m.createResource(ssn+"Device");
    	ontoRes.RoomSensor = m.createResource(iotins+sensorInf.quantitykind+"SensorRoom"+sensorInf.sensorId);//editlagi
    	ontoRes.sensingdevice = m.createResource(ssn+"SensingDevice");
    	ontoRes.deviceDeployment = m.createResource(iotins+"SensorRoom"+sensorInf);
    	ontoRes.deployment = m.createResource(ssn+"Deployment");
    	ontoRes.locationRoom = m.createResource(iotins+"locationRoom"+sensorInf.sensorId);
    	ontoRes.geoPoint = m.createResource(geo+"Point");
    	ontoRes.sensor = m.createResource(ssn+"sensor");
    	ontoRes.SensParam = m.createResource(iotins+sensorInf.unit+sensorInf.metadataType);
    	ontoRes.sensorDevice = m.createResource(iotins+"sensor"+sensorInf.sensorId);
    	ontoRes.quantityKind = m.createResource(qu+"quantityKind");
    	ontoRes.qKindName = m.createResource(qu+sensorInf.quantitykind);
    	ontoRes.metadata = m.createResource(iotlite+"Metadata");
    	ontoRes.uName = m.createResource(qu+sensorInf.unit);
    	ontoRes.unit = m.createResource(qu+"Unit");
    	
    	
    	
    	m.add(ontoRes.system, ontoProp.hasSubsystem, ontoRes.sensorid)
    	 .add(ontoRes.sensorid, RDF.type, OWL2.NamedIndividual)
    	 .add(ontoRes.sensorid, RDF.type, ontoRes.device)
    	 .add(ontoRes.sensorid, ontoProp.hasSubsystem, ontoRes.RoomSensor)
    	 .add(ontoRes.RoomSensor, RDF.type, OWL2.NamedIndividual)
    	 .add(ontoRes.RoomSensor, RDF.type, ontoRes.sensingdevice)
    	 .add(ontoRes.RoomSensor, ontoProp.hasDeployment, ontoRes.deviceDeployment)
    	 .add(ontoRes.deviceDeployment, RDF.type, OWL2.NamedIndividual)
    	 .add(ontoRes.deviceDeployment, RDF.type, ontoRes.deployment)
    	 .add(ontoRes.deviceDeployment, ontoProp.hasLocation, ontoRes.locationRoom)
    	 .add(ontoRes.locationRoom, RDF.type, OWL2.NamedIndividual)
    	 .add(ontoRes.locationRoom, RDF.type, ontoRes.geoPoint)
    	 .add(ontoRes.locationRoom, ontoProp.altRelative, "Ruangan")
    	 .add(ontoRes.sensorDevice, RDF.type, OWL2.NamedIndividual)
    	 .add(ontoRes.sensorDevice, RDF.type, ontoRes.sensor)
    	 .add(ontoRes.sensorDevice, ontoProp.hasSensingDevice, ontoRes.RoomSensor)
    	 .add(ontoRes.sensorDevice, ontoProp.hasQuantityKind, ontoRes.qKindName)
    	 .add(ontoRes.qKindName, RDF.type, OWL2.NamedIndividual)
    	 .add(ontoRes.qKindName, RDF.type, ontoRes.quantityKind)
    	 .add(ontoRes.sensorDevice, ontoProp.hasMetadata, ontoRes.SensParam)
    	 .add(ontoRes.SensParam, RDF.type, OWL2.NamedIndividual)
    	 .add(ontoRes.SensParam, RDF.type, ontoRes.metadata)
    	 .add(ontoRes.SensParam, ontoProp.metaDataType, sensorInf.metadataType)
    	 .add(ontoRes.SensParam, ontoProp.metaDataValue, sensorInf.metadataValue)
    	 .add(ontoRes.sensorDevice, ontoProp.hasUnit, ontoRes.uName)
    	 .add(ontoRes.uName, RDF.type, OWL2.NamedIndividual)
    	 .add(ontoRes.uName, RDF.type, ontoRes.unit);
    }
}